name: Generate Website

permissions:
  contents: write    # Needed for checkout and gh-pages deploy
  pages: write       # Needed for gh-pages deploy
  id-token: write    # May be needed depending on future interactions

on:
  repository_dispatch:
    types: [website-generation]

# Concurrency Control
concurrency:
  group: ${{ github.workflow }} # Group runs of THIS workflow
  cancel-in-progress: false    # Queue new runs instead of canceling old ones

jobs:
  generate-website:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install Node.js Dependencies
        run: npm install
        shell: bash

      - name: Compile Tailwind CSS
        run: npx tailwindcss -i ./src/input.css -o ./python-service/templates/styles.css --minify
        shell: bash

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install boto3 requests jinja2 python-dotenv xmltodict flask
        shell: bash

      - name: Process website content & Copy Files
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          S3_BUCKET_NAME: ${{ secrets.S3_BUCKET_NAME }}
          GITHUB_PAGES_TARGET: clickcatalyst-digital.github.io
          GITHUB_EVENT_PATH: ${{ github.event_path }}
        run: |
          python -c "
          import json, sys, os, shutil
          import logging
          from pathlib import Path
          
          # Configure logging
          logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(name)s - %(message)s')
          logger = logging.getLogger(__name__)
          
          # Add python-service to path so we can import the shared module
          sys.path.append('./python-service')
          
          try:
              # Import the shared website_generator module
              from website_generator import generate_website
              logger.info('Successfully imported website_generator module.')
          except ImportError as import_err:
              logger.error(f"Failed to import: {import_err}")
              sys.exit(1)
          except Exception as setup_err:
              logger.error(f"Error during setup/import: {setup_err}")
              sys.exit(1)
          
          # Get event data from GitHub Actions
          event_path = os.environ.get('GITHUB_EVENT_PATH')
          if not event_path or not os.path.exists(event_path):
              logger.error('GITHUB_EVENT_PATH invalid.')
              sys.exit(1)
          
          try:
              with open(event_path) as f:
                  event_data = json.load(f)
          except Exception as json_err:
              logger.error(f"Failed JSON load: {json_err}")
              sys.exit(1)
          
          # Extract payload data
          payload = event_data.get('client_payload', {})
          bucket = payload.get('bucket')
          folder_name = payload.get('folderName')
          website_id = payload.get('websiteId')
          
          if not all([bucket, folder_name, website_id]):
              logger.error('Missing payload keys.')
              sys.exit(1)
          
          logger.info(f"Processing website: {website_id} ({folder_name})")
          
          # Get AWS credentials from environment
          aws_access_key_id = os.environ.get('AWS_ACCESS_KEY_ID')
          aws_secret_access_key = os.environ.get('AWS_SECRET_ACCESS_KEY')
          aws_region = os.environ.get('AWS_REGION')
          
          if not all([aws_access_key_id, aws_secret_access_key, aws_region]):
              logger.error('Missing AWS credentials.')
              sys.exit(1)
          
          # Use the shared module to generate the website
          templates_dir = './python-service/templates'
          result = generate_website(
              aws_access_key_id=aws_access_key_id,
              aws_secret_access_key=aws_secret_access_key,
              aws_region=aws_region,
              bucket=bucket,
              folder_name=folder_name,
              website_id=website_id,
              templates_dir=templates_dir
          )
          
          if result['success']:
              logger.info(result['message'])
          else:
              logger.error(f"Generation failed: {result['message']}")
              sys.exit(1)
          "
        shell: bash

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./clients     # Deploy the whole 'clients' folder
          keep_files: true         # Keep existing files/folders
          commit_message: Deploy website for ${{ github.event.client_payload.folderName }}
